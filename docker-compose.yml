version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecyber-postgres
    environment:
      POSTGRES_DB: ecyber
      POSTGRES_USER: ecyber_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ecyber-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecyber_user -d ecyber"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecyber-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecyber-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ecyber-backend
    environment:
      - DATABASE_URL=postgresql://ecyber_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ecyber
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - CORS_ORIGINS=http://localhost:3000,https://yourdomain.com
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=1440
      - RATE_LIMIT_ENABLED=true
      - THREAT_INTELLIGENCE_ENABLED=true
      - NETWORK_MONITORING_ENABLED=true
      - SIEM_ENABLED=true
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./temp:/app/temp
    ports:
      - "8000:8000"
    networks:
      - ecyber-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ecyber-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    networks:
      - ecyber-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ecyber-celery-worker
    command: celery -A main.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://ecyber_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ecyber
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./temp:/app/temp
    networks:
      - ecyber-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ecyber-celery-beat
    command: celery -A main.celery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://ecyber_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ecyber
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./temp:/app/temp
    networks:
      - ecyber-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ecyber-flower
    command: celery -A main.celery flower --port=5555
    environment:
      - DATABASE_URL=postgresql://ecyber_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ecyber
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ENVIRONMENT=production
    ports:
      - "5555:5555"
    networks:
      - ecyber-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ecyber-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ecyber-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ecyber-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - ecyber-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx Load Balancer (Optional)
  nginx-lb:
    image: nginx:alpine
    container_name: ecyber-nginx-lb
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ecyber-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecyber-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

